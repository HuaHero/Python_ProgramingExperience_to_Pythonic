1. 问题：在Python工程中，创建了一个包，将包里__init__.py改成其它文件名后，在另一个包中，采用from引用时，引用不到；

   解决：每个包下面，需要有__init__.py，主要逻辑可以是放在包下其它命名的文件中，但必须要有init__.py，为什么是这样还待学习和查阅资料。

2. 问题：在Python中采用标准库logging的config.configFile进行日志管理，在日志配置文件中写的对应root日志handler的日志级别是DEBUG,但是采用logging.info时，还是没有输出；

   解决：因为采用的logger是root，但是没有指定root的日志级别，导致root默认采用的warning级别，比DEBUG级别高，导致没有输出，将root的日志级别设置为DEBUG后解决。

3. 问题：Python中如何判断某个文件是否存在；

   解决：通过引入os模块，里面根据程序运行所在OS识别文件路径分隔符（如windows用\，Unix类用/）,os模块还提供os.path.exists()来判断目录或文件是否存在，os.path.isdir()来判断是否是目录，os.path.isfile()来判断是否为文件。

4. 问题:Python中如何读取配置文件并获取里面的值？

   解决：Python提供了ConfigParser模块，其根据配置文件的节和选项，就可以获取到对应配置值。只需要引入ConfigParser模块，通过其构造函数获得对应对象，对应对象read(相应配置文件)即得到了配置文件中的所有配置，通过ConfigParser的sections()获得所有节，根据ConfigParser的get(section, option)获得对应选项的配置值。

5. 问题：Python程序中，如何输出程序运行中的日志到文件，并且可以配置日志的格式？

   解决：输出程序运行日志到文件，Python提供了logging模块，logging模块的模型是将日志记录过程中分为日志记录器logger、日志处理器(日志工具吧，loghandler)和格式器(formatter)等角色。当然，这些也都可以通过配置文件来指定具体值，要读取配置，显然也是要用到上面提到的ConfigParser模块，可以参照下面这个日志配置文件：

   ```ini
   ;同名应用程序日志输出相关控制信息
   [loggers]
   ;声明一个名为administrator的日志记录器,logger
   keys = root
   
   [handlers]
   ;声明一个名为loghandler的日志处理器（用以表明日志保存到什么地方，以及保存多久）
   keys = loghandler
   
   [formatters]
   ;声明一个名为generic的formatter(用以配置日志的输出格式)
   keys = generic
   
   [logger_root]
   ;定义root这个logger所用的handler,root logger必须指定一个级别，否则，默认是WARNING级别
   level=DEBUG
   handlers = loghandler
   
   [handler_loghandler]
   ;定义loghandler这个handler输出日志的方式、日志的切换时间等
   class = handlers.TimedRotatingFileHandler
   args = ('../OBS_logTransporter.log','midnight',1,10)
   level = DEBUG
   formatter = generic
   
   [formatter_generic]
   ;定义generic这个formatter的日志格式，包括日志产生的时间、日志的级别、产生日志的文件名和行号等信息
   ;如下格式中，name只是logger的name，并不是对应打印日志处的文件名的name
   ;format = %(asctime)s %(levelname)-5.5s [%(name)s:%(lineno)s] %(message)s
   format = %(asctime)s %(levelname)-5.5s [%(filename)s:%(lineno)s] %(message)s
   ```

   网上参考说明https://www.cnblogs.com/nancyzhu/p/8551506.html，也可以看Python Docs.

6. 问题：使用PyCharm编写Python程序，PyCharm提示“Shadows name from outer scope”
   解决：根据网上别人的博客https://www.crifan.com/pycharm_python_code_notice_shadows_name_from_outer_scope/ ，该博客总结为“函数内部的变量，如果和函数被调用的外部的变量一样的话，就被PyCharm中叫做shadows name，这样的话，容易引发不容易觉察到的，由于函数内部和外部的变量名一致而引发的一些问题，比如：内部函数名引用时不小心写错了时，就会导致其实调用了外部变量名，从而导致逻辑错乱。所以解决办法是：确保函数内部和外部的变量名不要重复，这样就不会导致可能由此导致的错误了。”，个人经验是，如果用到的变量名可能与Python系统内置的变量或外部模块的变量相同时，可能也会提示这个，所以，确实最好不要重复与外部的变量名，另外，如果不确定引用的某个全局变量是否可能与其它模块的全局变量冲突，则建议，使用时，明确指定是哪个模块中的变量，例如，from datetime import datetime.
   
7.问题：Python中如何方便地管理远程服务器，及进行FTP类操作？
  解决： Python有一个很好的开源库paramiko，网上有博客https://www.cnblogs.com/yangmv/p/5169924.html和https://www.cnblogs.com/pizitai/p/6398632.html也有介绍使用paramiko进行ftp类操作。实际上，paramiko是一个openssh封装Python库，其提供了SSHClient类对ssh的封装和SFTPClient类对ftp的封装，也可以直接在使用SSHClient类的构造函数获得sshclient实例基础上，再通过该实例的tansport(传输)或chnnel(通道)基础上再进行文件传输类操作。
8.问题：Python中引入paramikor编程时，PyCharm中提示python paramiko CryptographyDeprecationWarning 
  解决：【原因】paramiko 2.4.2 依赖 cryptography，而最新的cryptography==2.5里有一些弃用的API。
        【解决】删掉cryptography 2.5，安装2.4.2，就不会报错了。
            pip uninstall cryptography==2.5
            pip install cryptography==2.4.2
       参考https://yq.aliyun.com/articles/690717 
       
9.问题：Python采用开源库paramiko进行ssh到远程服务器上执行命令后，取到的返回结果stdout,stderr都为空，是什么原因？
  解决：经过调测发现，原来是因为取到的stdout,stderr必须立即readline()或readlines()的结果返回，或者赋值给其它变量，否则，只要ssh关掉，则里面的内容都立马清空了。因为stdin,stdout,stderr都是chanelfile类型（虽然还没有明白这个CHANELFILE是什么类型的文件，但是从命名来看，跟CHANEL相关，既然CHANEL关掉了，CHANEL上的内容自然也就没有了)
10.问题：如何利用shell计算通过find查找出来的文件总大小？
   解决：参照https://blog.51cto.com/204222/2113917,find ./ -name ".txt" -exec ls -lh {} \;| awk 'BEGIN {SUM7=0}{ SUM7+=$5} END {print SUM7}',我的改进后'find \\'/APPlog\\' -mtime -1 -type f -exec du -hsm {} \\;|awk \\'BEGIN {SUM=0}{ SUM+=$1} END {print SUM}\\''。主要是通过find命令与awk结合，注意， 放在Python里调度时，由于awk后的命令，从实测来看，是要用单引号，因此，Python语句中则得用双引号来括起该语句。
11.问题：python出现"No module named "XXX""的解决办法
   解决：参照https://blog.csdn.net/ouening/article/details/53490847，找到自己的Python安装目录下lib目录里面的site-packages里，在里面建一个命名的.pth文件，然后在里面填写自己的工程的路径，则可以解决。自己实测，用2.7版本，自己建的工程中有多个模块，采用此方法解决了同样的问题。

  
  


